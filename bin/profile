#!/bin/bash --
. ~/.bashrc

# Proxy configuration either DEFAULT or K8S for kubernetes deployments to vmware
export PROXY_CONFIG=${PROXY_CONFIG:-NONE}

#####################################################
alias ls='ls --color'
alias vim74='/Applications/MacVim.app/Contents/MacOS/Vim'
alias iterm='/Applications/iTerm.app/Contents/MacOS/iTerm'
alias finder='~/bin/finder.sh'
alias eclipse="xterm -e  /home/wwallace/EclipseMarsForC++/eclipse &"
alias eclipse2020="xterm -e /home/wwallace/eclipse/cpp-2020-03/eclipse/eclipse &"
alias komodo="$HOME/Komodo-IDE-12/bin/komodo &"

export EDITOR="vim"
export GIT_EDITOR="vim"
export JAVA_HOME="/usr/lib/jvm/java-8-openjdk-amd64"
export MVN_BIN="/Users/willwallace/apache-maven-3.3.9/bin"
export SANDBOX="${HOME}/sandbox"
export AUTOHOME="${HOME}/sandbox/automation"
export RUBYGEMS_HOST=http://artifact.simplivt.local:8081/artifactory/api/gems/gems-foxhound-local
export SSH_USER="wwallace"
#export GIT_SSL_NO_VERIFY=1
export ROBOT_ROOT="/home/wwallace/sandbox/robot"
export FIB_IMAGE_PATH="/media/templates/FIB-VMs"

## $GOPATH:  The customizable go directory for additional modules and executables
export GOPATH=$HOME/go
## $GOROOT: The root go installation directory
export GOROOT=/usr/local/go
## $GO_BIN: This is the directory containing go executables
export GO_BIN=$GOROOT/bin

alias ssvtsetup='cd ${SANDBOX}/svt-dev-tools && source bin/svtsetup'
alias ovftool='/Applications/VMware\ Fusion.app/Contents/Library/VMware\ OVF\ Tool/ovftool'
alias flushdns='sudo killall -HUP mDNSResponder; sleep 1; dscacheutil -flushcache'
alias cow='/usr/games/fortune | /usr/games/cowsay'
alias grep='grep --color'
alias devenv='cd ${SANDBOX}/svt-dev-tools && source bin/svtsetup'
alias report="${AUTOHOME}/ATF/scripts/gen_report.pl"


if [ -f ~/.git_alias ];then
  source ~/.git_alias
fi

source ${HOME}/bin/functions.sh

set_proxy() {
    case $PROXY_CONFIG in
        K8S)
            export http_proxy=http://proxy.houston.hpecorp.net:8080
            export https_proxy=http://proxy.houston.hpecorp.net:8080
            export no_proxy=.hpecorp.net,.simplivt.local,10.0.0.0/8
        ;;

        DEFAULT)
            export http_proxy=http://localhost:8888
            export https_proxy=http://localhost:8888
            export no_proxy=.hpecorp.net,.simplivt.local,10.0.0.0/8
         ;;

         *)
             unset http_proxy
             unset https_proxy
             unset no_proxy
	 ;;
    esac
    cat << FIN
    PROXY_CONFIG=$PROXY_CONFIG
    http_proxy=$http_proxy
    https_proxy=$https_proxy
    no_proxy=$no_proxy
FIN
}

set_proxy

xssh() {
  for host in $@
  do
  	echo "Connecting to ${host}"
    case ${host} in
      foreman-prod*)
        fg="yellow" 
        bg="rgb:80/00/00"
        ;;
      smartproxy-frco*)
        fg="white" 
        bg="rgb:af/00/00"
        ;;
      smartproxy-wb*)
        fg="white" 
        bg="rgb:80/00/00"
        ;;
      vyos)
        fg="black" 
        bg="gray"
        ;;
      *prod_alt)
        fg="white"
        bg="rgb:00/5f/87"
        ;;
      *)
        fg="white"
        bg="black"
        ;;
    esac
    xterm -fg ${fg} -bg ${bg} -e ssh ${host} &
  done
}

vssh() {
  for host in $@
  do
  	echo "Connecting to ${host}"
    case ${host} in
      ubuntu)
        xterm -fg white -bg rgb:5f/00/5f -e vagrant ssh ${host} &
      ;;

      centos)
        xterm -fg black -bg rgb:ff/df/af -e vagrant ssh ${host} &
      ;;

      puppet_master*)
        xterm -fg white -bg rgb:5f/00/d7 -e vagrant ssh ${host} &
      ;;

      *)
        xterm -fg yellow -bg rgb:00/00/5f -e vagrant ssh ${host} &
      ;;
    esac
  done
}

xvim() {
  for i in $@
  do
    xterm -rv -e vim $i &
  done
}

xless() {
  for i in $@
  do
    xterm -rv -e less $i &
  done
}

fif() {
  options="-l"
  if [ "X${show_in_file}" = "Xtrue" ];then
    options=""
  fi
  if [ -z $1 ];then
    red "Please provide a directory to start in"
    echo "usage fif <dir> <string>"
    return
  fi
  if [ -z $2 ];then
    red "Please provide a string to look for"
    echo "usage fif <dir> <string>"
    return
  fi
  find -L $1 -type f -exec grep ${options} "$2" {} \;
  show_in_file="false"
}

sif() {
  show_in_file=true
fif ${@} 
}

echo $PATH | grep -q ${MVN_BIN} || export PATH=${MVN_BIN}:${PATH}
echo $PATH | grep -q ${JAVA_HOME}/bin || export PATH=${JAVA_HOME}/bin:${PATH}
echo $PATH | grep -q ${HOME}/bin || export PATH=${HOME}/bin:${PATH}
echo $PATH | grep -q ${HOME}/testbeds || export PATH=${HOME}/testbeds:${PATH}
echo $PATH | grep -q ${GO_BIN} || export PATH=${PATH}:${GO_BIN}
echo $PATH | grep -q ${GOPATH}/bin || export PATH=${PATH}:${GOPATH}/bin

#RVM a ruby version manager
if [ -z ${RVMBIN} ];then
  export RVMBIN=${HOME}/.rvm/bin
  export PATH="$PATH:${RVMBIN}" # Add RVM to PATH for scripting
fi
[[ -s "$HOME/.rvm/scripts/rvm" ]] && source "$HOME/.rvm/scripts/rvm" # Load RVM into a shell session *as a function*

spec() {
  if [ $#  -ne 1 ];then
    red 'Please provide a directory argument'
    return
  fi
  if [ ! -d $1 ];then
    red "$1 is not a directory"
    return
  fi
  pushd $1; 
  set -x
  bundle install --path vendor/gems
  bundle exec rake spec_prep
  set +x
  cyan 'bundle exec rspec <path/to/spec_file.rb>'
  popd
}

envs() {
  #OLDPWD=`pwd`
  pushd . > /dev/null
  for i in `find $SANDBOX -maxdepth 3 -type d -name .git`
  do
    path=`echo ${i} | sed 's/\/\.git//'`
    if [ -d ${path}/.git ];then
      echo -n "$path: "
      cd ${path} && git br | grep \*
    fi
  done
  popd > /dev/null
  #cd $OLDPWD
}

isDocker() {
    myname=$(hostname | cut -c1-3)
    if [ "X$myname" == "Xdvm" ];then 
       echo "Running on native Linux"
       return 0
   else
       echo "Using docker"
       return 1
   fi
}

isDocker && cow
cd $HOME
